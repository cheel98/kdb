# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import knowledge_service_pb2 as knowledge__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in knowledge_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class KnowledgeServiceStub(object):
    """知识库服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/knowledge_service.KnowledgeService/Chat',
                request_serializer=knowledge__service__pb2.ChatRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.ChatConversation = channel.unary_unary(
                '/knowledge_service.KnowledgeService/ChatConversation',
                request_serializer=knowledge__service__pb2.ConversationChatRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.CreateConversation = channel.unary_unary(
                '/knowledge_service.KnowledgeService/CreateConversation',
                request_serializer=knowledge__service__pb2.CreateConversationRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.ConversationResponse.FromString,
                _registered_method=True)
        self.GetConversationHistory = channel.unary_unary(
                '/knowledge_service.KnowledgeService/GetConversationHistory',
                request_serializer=knowledge__service__pb2.ConversationHistoryRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.ConversationHistoryResponse.FromString,
                _registered_method=True)
        self.ListConversations = channel.unary_unary(
                '/knowledge_service.KnowledgeService/ListConversations',
                request_serializer=knowledge__service__pb2.ListConversationsRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.ListConversationsResponse.FromString,
                _registered_method=True)
        self.UpdateConversation = channel.unary_unary(
                '/knowledge_service.KnowledgeService/UpdateConversation',
                request_serializer=knowledge__service__pb2.UpdateConversationRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.ConversationResponse.FromString,
                _registered_method=True)
        self.DeleteConversation = channel.unary_unary(
                '/knowledge_service.KnowledgeService/DeleteConversation',
                request_serializer=knowledge__service__pb2.DeleteConversationRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.DeleteConversationResponse.FromString,
                _registered_method=True)
        self.SubmitFeedback = channel.unary_unary(
                '/knowledge_service.KnowledgeService/SubmitFeedback',
                request_serializer=knowledge__service__pb2.FeedbackRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.FeedbackResponse.FromString,
                _registered_method=True)
        self.GetFeedbackHistory = channel.unary_unary(
                '/knowledge_service.KnowledgeService/GetFeedbackHistory',
                request_serializer=knowledge__service__pb2.FeedbackHistoryRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.FeedbackHistoryResponse.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/knowledge_service.KnowledgeService/GetStats',
                request_serializer=knowledge__service__pb2.StatsRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.StatsResponse.FromString,
                _registered_method=True)
        self.SearchDocuments = channel.unary_unary(
                '/knowledge_service.KnowledgeService/SearchDocuments',
                request_serializer=knowledge__service__pb2.SearchRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.SearchResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/knowledge_service.KnowledgeService/HealthCheck',
                request_serializer=knowledge__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.VerifyEmail = channel.unary_unary(
                '/knowledge_service.KnowledgeService/VerifyEmail',
                request_serializer=knowledge__service__pb2.EmailVerificationRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.EmailVerificationResponse.FromString,
                _registered_method=True)
        self.ChatWithEmailVerification = channel.unary_unary(
                '/knowledge_service.KnowledgeService/ChatWithEmailVerification',
                request_serializer=knowledge__service__pb2.EmailChatRequest.SerializeToString,
                response_deserializer=knowledge__service__pb2.ChatResponse.FromString,
                _registered_method=True)


class KnowledgeServiceServicer(object):
    """知识库服务定义
    """

    def Chat(self, request, context):
        """聊天接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatConversation(self, request, context):
        """多轮对话聊天接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateConversation(self, request, context):
        """创建新对话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConversationHistory(self, request, context):
        """获取对话历史
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConversations(self, request, context):
        """列出对话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateConversation(self, request, context):
        """更新对话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteConversation(self, request, context):
        """删除对话
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitFeedback(self, request, context):
        """反馈接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFeedbackHistory(self, request, context):
        """获取反馈历史
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """获取系统统计信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchDocuments(self, request, context):
        """搜索文档
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyEmail(self, request, context):
        """验证邮箱（用于对话保存）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatWithEmailVerification(self, request, context):
        """带邮箱验证的对话聊天
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KnowledgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=knowledge__service__pb2.ChatRequest.FromString,
                    response_serializer=knowledge__service__pb2.ChatResponse.SerializeToString,
            ),
            'ChatConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatConversation,
                    request_deserializer=knowledge__service__pb2.ConversationChatRequest.FromString,
                    response_serializer=knowledge__service__pb2.ChatResponse.SerializeToString,
            ),
            'CreateConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConversation,
                    request_deserializer=knowledge__service__pb2.CreateConversationRequest.FromString,
                    response_serializer=knowledge__service__pb2.ConversationResponse.SerializeToString,
            ),
            'GetConversationHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConversationHistory,
                    request_deserializer=knowledge__service__pb2.ConversationHistoryRequest.FromString,
                    response_serializer=knowledge__service__pb2.ConversationHistoryResponse.SerializeToString,
            ),
            'ListConversations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConversations,
                    request_deserializer=knowledge__service__pb2.ListConversationsRequest.FromString,
                    response_serializer=knowledge__service__pb2.ListConversationsResponse.SerializeToString,
            ),
            'UpdateConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateConversation,
                    request_deserializer=knowledge__service__pb2.UpdateConversationRequest.FromString,
                    response_serializer=knowledge__service__pb2.ConversationResponse.SerializeToString,
            ),
            'DeleteConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteConversation,
                    request_deserializer=knowledge__service__pb2.DeleteConversationRequest.FromString,
                    response_serializer=knowledge__service__pb2.DeleteConversationResponse.SerializeToString,
            ),
            'SubmitFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitFeedback,
                    request_deserializer=knowledge__service__pb2.FeedbackRequest.FromString,
                    response_serializer=knowledge__service__pb2.FeedbackResponse.SerializeToString,
            ),
            'GetFeedbackHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeedbackHistory,
                    request_deserializer=knowledge__service__pb2.FeedbackHistoryRequest.FromString,
                    response_serializer=knowledge__service__pb2.FeedbackHistoryResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=knowledge__service__pb2.StatsRequest.FromString,
                    response_serializer=knowledge__service__pb2.StatsResponse.SerializeToString,
            ),
            'SearchDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchDocuments,
                    request_deserializer=knowledge__service__pb2.SearchRequest.FromString,
                    response_serializer=knowledge__service__pb2.SearchResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=knowledge__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=knowledge__service__pb2.HealthCheckResponse.SerializeToString,
            ),
            'VerifyEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyEmail,
                    request_deserializer=knowledge__service__pb2.EmailVerificationRequest.FromString,
                    response_serializer=knowledge__service__pb2.EmailVerificationResponse.SerializeToString,
            ),
            'ChatWithEmailVerification': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatWithEmailVerification,
                    request_deserializer=knowledge__service__pb2.EmailChatRequest.FromString,
                    response_serializer=knowledge__service__pb2.ChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'knowledge_service.KnowledgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('knowledge_service.KnowledgeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KnowledgeService(object):
    """知识库服务定义
    """

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/Chat',
            knowledge__service__pb2.ChatRequest.SerializeToString,
            knowledge__service__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChatConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/ChatConversation',
            knowledge__service__pb2.ConversationChatRequest.SerializeToString,
            knowledge__service__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/CreateConversation',
            knowledge__service__pb2.CreateConversationRequest.SerializeToString,
            knowledge__service__pb2.ConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConversationHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/GetConversationHistory',
            knowledge__service__pb2.ConversationHistoryRequest.SerializeToString,
            knowledge__service__pb2.ConversationHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListConversations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/ListConversations',
            knowledge__service__pb2.ListConversationsRequest.SerializeToString,
            knowledge__service__pb2.ListConversationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/UpdateConversation',
            knowledge__service__pb2.UpdateConversationRequest.SerializeToString,
            knowledge__service__pb2.ConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/DeleteConversation',
            knowledge__service__pb2.DeleteConversationRequest.SerializeToString,
            knowledge__service__pb2.DeleteConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/SubmitFeedback',
            knowledge__service__pb2.FeedbackRequest.SerializeToString,
            knowledge__service__pb2.FeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFeedbackHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/GetFeedbackHistory',
            knowledge__service__pb2.FeedbackHistoryRequest.SerializeToString,
            knowledge__service__pb2.FeedbackHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/GetStats',
            knowledge__service__pb2.StatsRequest.SerializeToString,
            knowledge__service__pb2.StatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/SearchDocuments',
            knowledge__service__pb2.SearchRequest.SerializeToString,
            knowledge__service__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/HealthCheck',
            knowledge__service__pb2.HealthCheckRequest.SerializeToString,
            knowledge__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/VerifyEmail',
            knowledge__service__pb2.EmailVerificationRequest.SerializeToString,
            knowledge__service__pb2.EmailVerificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChatWithEmailVerification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/knowledge_service.KnowledgeService/ChatWithEmailVerification',
            knowledge__service__pb2.EmailChatRequest.SerializeToString,
            knowledge__service__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
